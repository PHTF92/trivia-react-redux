{"version":3,"sources":["services/triviaAPI.js","actions/index.js","reducers/inputChangeReducers.js","reducers/selectorChangeReducers.js","reducers/questionsReducer.js","reducers/scoreChangeReducer.js","reducers/index.js","store/index.js","services/gravatarAPI.js","components/ConfigurationButton.js","components/InitialInputs.js","pages/Home.js","components/SettingsSelectors.js","pages/Settings.js","components/QuestionsTrivia.js","components/Header.js","pages/Questions.js","components/ToRanking.js","components/PlayAgain.js","pages/Feedback.js","pages/Ranking.js","App.js","serviceWorker.js","index.js"],"names":["getToken","fetch","then","response","json","result","localStorage","setItem","token","getCategories","a","fetchQuestions","categorie","difficult","type","dispatch","ok","Promise","resolve","reject","getsQuestions","questions","results","responseCode","response_code","error","receiveQuestionsFailure","message","handleScoreChanges","value","INITIAL_STATE","name","email","inputChanges","state","action","difficulty","selectorsChange","INITIAL_Q_STATE","isFetching","questionsReducer","score","scoreChange","RootReducer","combineReducers","scoreChangeReducer","store","createStore","applyMiddleware","thunk","getGravatar","hash","MD5","toLowerCase","trim","ConfigurationButton","to","data-testid","className","picture","initial","player","assertions","gravatarEmail","JSON","stringify","handleChange","e","handleInputChange","target","disableButton","connect","handlingInputChanges","htmlFor","id","onChange","event","disabled","onClick","handleClick","Home","SettingSelectors","props","categories","handleSelectorChange","setState","trivia_categories","this","map","key","categorieSelector","difficultySelector","typeSelector","Component","handleSelectorsChanges","Settings","QuestionsTrivia","index","isEndGame","isAnswered","rightQuestions","clock","parse","getItem","ranking","newPlayer","newRanking","category","question","buttonValue","correctAnswer","allAnswers","indexOf","adjustingFetch","intervalID","setInterval","prevState","clearInterval","clockTimer","getQuestions","adjustedCategorie","adjustedDifficult","adjustedType","setRanking","userAnswer","objAnswer","changeScore","correct_answer","newScore","calculateScore","hidden","changeIndex","notFound","incorrect_answers","randomQuestions","renderQuestion","sort","answer","classNameToButton","dataTestToAnswer","validAnswer","buttonNext","defaultProps","Header","alt","src","window","location","href","includes","React","storeScore","Questions","buttonName","invertedScore","Feedback","answerTitle","Ranking","getLocalStor","b","position","imgComponent","App","basename","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4cbb51e4.chunk.js","sourcesContent":["const TRIVIA_BASE_API = 'https://opentdb.com';\n\nexport const getToken = () => (\n  fetch(`${TRIVIA_BASE_API}/api_token.php?command=request`)\n    .then((response) => response.json())\n    .then((result) => localStorage.setItem('token', result.token))\n);\n\nexport const getCategories = async () => {\n  const response = await fetch(`${TRIVIA_BASE_API}/api_category.php`);\n  const result = await response.json();\n  return result;\n};\n\nexport const getsQuestions = (categorie, difficult, type, token) => (\n  fetch(`${TRIVIA_BASE_API}/api.php?amount=5${token}${categorie}${difficult}${type}`)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n","import { getsQuestions } from '../services/triviaAPI';\n\nexport const CHANGE_INPUT = 'CHANGE_INPUT';\nexport const GET_CATEGORIE = 'GET_CATEGORIE';\nexport const CHANGE_SELECTORS = 'CHANGE_SELECTORS';\n\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const RECEIVE_Q_SUCCESS = 'RECEIVE_Q_SUCCESS';\nexport const RECEIVE_Q_FAILURE = 'RECEIVE_Q_FAILURE';\n\nexport const CHANGE_SCORE = 'CHANGE_SCORE';\n\nconst requestQuestions = () => ({\n  type: REQUEST_QUESTIONS,\n});\n\nconst receiveQuestionsFailure = (error) => ({\n  type: RECEIVE_Q_FAILURE,\n  error,\n});\n\nconst receiveQuestionsSuccess = ({ results, response_code: responseCode }) => ({\n  type: RECEIVE_Q_SUCCESS,\n  results,\n  responseCode,\n});\n\nexport function fetchQuestions(categorie, difficult, type, token) {\n  return (dispatch) => {\n    dispatch(requestQuestions());\n\n    return getsQuestions(categorie, difficult, type, token)\n      .then(\n        (questions) => dispatch(receiveQuestionsSuccess(questions)),\n        (error) => dispatch(receiveQuestionsFailure(error.message)),\n      );\n  };\n}\n\nexport const handlingInputChanges = (value, name) => ({\n  type: CHANGE_INPUT,\n  value,\n  name,\n});\n\nexport const getAllCategories = (categories) => ({\n  type: GET_CATEGORIE,\n  categories,\n});\n\nexport const handleSelectorsChanges = (value, name) => ({\n  type: CHANGE_SELECTORS,\n  value,\n  name,\n});\n\nexport const handleScoreChanges = (value) => ({\n  type: CHANGE_SCORE,\n  value,\n});\n","import { CHANGE_INPUT } from '../actions';\n\nexport const INITIAL_STATE = {\n  name: '',\n  email: '',\n};\n\nconst inputChanges = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return {\n        ...state,\n        [action.name]: action.value,\n      };\n    default: return state;\n  }\n};\n\nexport default inputChanges;\n","import { CHANGE_SELECTORS } from '../actions';\n\nconst INITIAL_STATE = {\n  categorie: '',\n  difficulty: '',\n  type: '',\n};\n\nconst selectorsChange = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_SELECTORS:\n      return {\n        ...state,\n        [action.name]: action.value,\n      };\n    default: return state;\n  }\n};\n\nexport default selectorsChange;\n","import { REQUEST_QUESTIONS, RECEIVE_Q_SUCCESS, RECEIVE_Q_FAILURE } from '../actions';\n\nconst INITIAL_Q_STATE = {\n  isFetching: false,\n  results: '',\n};\n\nconst questionsReducer = (state = INITIAL_Q_STATE, action) => {\n  const { results, responseCode } = action;\n  switch (action.type) {\n    case REQUEST_QUESTIONS:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_Q_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        results,\n        responseCode,\n      };\n    case RECEIVE_Q_FAILURE:\n      return {\n        ...state,\n        error: action.error,\n        isFetching: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default questionsReducer;\n","import { CHANGE_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  score: 0,\n};\n\nconst scoreChange = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_SCORE:\n      return {\n        ...state,\n        score: state.score + action.value,\n      };\n    default: return state;\n  }\n};\n\nexport default scoreChange;\n","import { combineReducers } from 'redux';\nimport inputChanges from './inputChangeReducers';\nimport selectorsChange from './selectorChangeReducers';\nimport questionsReducer from './questionsReducer';\nimport scoreChangeReducer from './scoreChangeReducer';\n\nconst RootReducer = combineReducers({\n  inputChanges,\n  selectorsChange,\n  questionsReducer,\n  scoreChangeReducer,\n});\n\nexport default RootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport RootReducer from '../reducers';\n\nconst store = createStore(RootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import MD5 from 'crypto-js/md5';\n\nconst GRAVATAR_BASE_API = 'https://www.gravatar.com/avatar/';\nconst defaultImage = 'https://www.gravatar.com/avatar/2d3bf5b67282f5f466e503d7022abcf3';\n\nconst getGravatar = (email) => {\n  const hash = MD5(email.toLowerCase().trim());\n  return `${GRAVATAR_BASE_API}${hash}?d=${defaultImage}`;\n};\n\nexport default getGravatar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../style/ConfigurationButton.css';\n\nconst ConfigurationButton = () => (\n  <Link to=\"/settings\">\n    <button\n      data-testid=\"config-button\"\n      className=\"config-btn\"\n    >\n      <span className=\"pra-cego-ver\">Configurações</span>\n    </button>\n  </Link>\n);\n\nexport default ConfigurationButton;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getGravatar from '../services/gravatarAPI';\nimport ConfigurationButton from './ConfigurationButton';\nimport { handlingInputChanges } from '../actions';\nimport { getToken } from '../services/triviaAPI';\nimport '../style/InitialInputs.css';\n\nasync function handleClick(name, email) {\n  const picture = getGravatar(email);\n  const initial = {\n    player: {\n      name,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: email,\n      picture,\n    },\n  };\n  localStorage.setItem('state', JSON.stringify(initial));\n  await getToken();\n}\n\nconst handleChange = (e, handleInputChange) => {\n  const { name, value } = e.target;\n  handleInputChange(value, name);\n};\n\nconst disableButton = (name, email) => {\n  if (name !== '' && email !== '') {\n    return false;\n  }\n  return true;\n};\n\nconst InitialInputs = ({ name, email, handleInputChange }) => (\n  <div>\n    <div className=\"container-config-btn\">\n      <ConfigurationButton />\n    </div>\n    <div className=\"home-container\">\n      <label className=\"home-text\" htmlFor=\"email\">Email do Gravatar:</label>\n      <input\n        className=\"home-inputs-and-btn\"\n        value={email || ''}\n        id=\"email\"\n        onChange={(event) => handleChange(event, handleInputChange)}\n        name=\"email\"\n        type=\"text\"\n        data-testid=\"input-gravatar-email\"\n      />\n      <label className=\"home-text\" htmlFor=\"name\">Nome do jogador:</label>\n      <input\n        className=\"home-inputs-and-btn\"\n        value={name || ''}\n        id=\"name\"\n        onChange={(event) => handleChange(event, handleInputChange)}\n        name=\"name\"\n        type=\"text\"\n        data-testid=\"input-player-name\"\n      />\n      <Link to=\"/game\">\n        <button\n          className=\"home-inputs-and-btn home-btn-play\"\n          disabled={disableButton(name, email)}\n          onClick={() => handleClick(name, email)}\n          data-testid=\"btn-play\"\n        >\n          JOGAR!\n      </button>\n      </Link>\n    </div>\n  </div>\n);\n\n\nconst mapStateToProps = ({\n  handleInputChange,\n  inputChanges: { name, email },\n}) => (\n  {\n    name, email, handleInputChange,\n  }\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleInputChange: (value, name) => dispatch(handlingInputChanges(value, name)),\n});\n\nInitialInputs.propTypes = {\n  handleInputChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialInputs);\n","import React from 'react';\nimport InitialInputs from '../components/InitialInputs';\n\nconst Home = () => (\n  <div>\n    <InitialInputs />\n  </div>\n);\n\n\nexport default Home;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getCategories } from '../services/triviaAPI';\nimport { handleSelectorsChanges } from '../actions';\nimport '../style/SettingSelectors.css';\n\nclass SettingSelectors extends Component {\n\n  static typeSelector(handleSelectorChange, type) {\n    return (\n      <div>\n        <label className=\"settings-label\" htmlFor=\"type\">Tipo</label>\n        <select\n          className=\"settings-input\"\n          data-testid=\"question-type-dropdown\"\n          value={type} name=\"type\"\n          onChange={(event) => SettingSelectors.handleChange(event, handleSelectorChange)}\n        >\n          <option\n            value=\"\"\n          >\n            Escolha um tipo\n            </option>\n          <option\n            value=\"boolean\"\n          >\n            V ou F\n            </option>\n          <option\n            value=\"multiple\"\n          >\n            Múltipla Escolha\n            </option>\n        </select>\n      </div>\n    );\n  }\n\n  static difficultySelector(handleSelectorChange, difficulty) {\n    return (\n      <div>\n        <label className=\"settings-label\" htmlFor=\"difficulty\">Dificuldade</label>\n        <select\n          className=\"settings-input\"\n          data-testid=\"question-difficulty-dropdown\"\n          value={difficulty}\n          name=\"difficulty\"\n          onChange={(event) => SettingSelectors.handleChange(event, handleSelectorChange)}\n        >\n          <option value=\"\">Escolha a dificuldade</option>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n      </div>\n    );\n  }\n\n  static handleChange(e, handleSelectorChange) {\n    const { name, value } = e.target;\n    handleSelectorChange(value, name);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: '',\n    };\n  }\n\n  componentDidMount() {\n    const category = getCategories();\n    category.then((categorie) => {\n      this.setState({ categories: [...categorie.trivia_categories] });\n    });\n  }\n\n  categorieSelector(handleSelectorChange, categorie) {\n    const categories = this.state.categories || [];\n    return (\n      <div>\n        <label className=\"settings-label\" htmlFor=\"categorie\">Categoria</label>\n        <select\n          className=\"settings-input\"\n          data-testid=\"question-category-dropdown\"\n          value={categorie} name=\"categorie\"\n          onChange={(event) => SettingSelectors.handleChange(event, handleSelectorChange)}\n        >\n          <option value=\"\">Escolha uma categoria</option>\n          {categories.map(({ name, id }) => (\n            <option data-testid={`category-option-${id}`} key={name} value={id}>{name}</option>\n          ))\n          }\n        </select >\n      </div>\n    );\n  }\n\n  render() {\n    const { handleSelectorChange, categorie, difficulty, type } = this.props;\n    return (\n      <div className=\"settings-container\">\n        <p className=\"settings-title\">Configurações</p>\n        <div>\n          <div>\n            {this.categorieSelector(handleSelectorChange, categorie)}\n            {SettingSelectors.difficultySelector(handleSelectorChange, difficulty)}\n            {SettingSelectors.typeSelector(handleSelectorChange, type)}\n            <Link to=\"/\">\n              <button className=\"settings-btn\">Voltar</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ selectorsChange: { categorie, difficulty, type } }) => (\n  {\n    categorie,\n    difficulty,\n    type,\n  }\n);\nconst mapDispatchToProps = (dispatch) => ({\n  handleSelectorChange: (value, name) => dispatch(handleSelectorsChanges(value, name)),\n});\n\nSettingSelectors.propTypes = {\n  handleSelectorChange: PropTypes.func.isRequired,\n  categorie: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingSelectors);\n","import React from 'react';\nimport SettingSelectors from '../components/SettingsSelectors';\n\nconst Settings = () => (\n  <div>\n    <SettingSelectors />\n  </div>\n);\n\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { fetchQuestions, handleScoreChanges } from '../actions';\n\nimport '../style/QuestionsTrivia.css';\n\nconst randomQuestions = (results, index) => {\n  if (results) {\n    return [...results[index].incorrect_answers, results[index].correct_answer];\n  }\n  return '';\n};\n\nconst calculateScore = (difficulty) => {\n  switch (difficulty) {\n    case 'easy':\n      return 1;\n    case 'medium':\n      return 2;\n    case 'hard':\n      return 3;\n    default: return '';\n  }\n};\n\nclass QuestionsTrivia extends Component {\n  static notFound() {\n    return (\n      <Redirect to=\"/\" />\n    );\n  }\n\n  static setRanking() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    const { name, score, picture } = state.player;\n    const ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n    const newPlayer = { name, score, picture };\n    const newRanking = [...ranking, newPlayer];\n    localStorage.setItem('ranking', JSON.stringify(newRanking));\n  }\n\n  static renderQuestion(clock, category, question) {\n    return (\n      <div className=\"questions-text\">\n        <div className=\"questions-title\">\n          <div>\n            <p\n              data-testid=\"question-category\"\n              className=\"questions-category\"\n            >\n              {category}\n            </p>\n          </div>\n          <p\n            data-testid=\"question-text\"\n            className=\"questions-phrase\"\n          >\n            {question}\n          </p>\n        </div>\n        <p\n          data-testid=\"timer\"\n          className=\"questions-clock\"\n        >\n          Tempo: {clock}\n        </p>\n      </div>\n    );\n  }\n\n  static dataTestToAnswer(buttonValue, correctAnswer, allAnswers) {\n    if (buttonValue !== correctAnswer) {\n      return `wrong-answer-${allAnswers.indexOf(buttonValue)}`;\n    }\n    return 'correct-answer';\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      isEndGame: false,\n      isAnswered: false,\n      rightQuestions: 0,\n      clock: 30,\n      score: 0,\n    };\n  }\n\n  async componentDidMount() {\n    this.adjustingFetch();\n    this.intervalID = setInterval(() => {\n      const { clock } = this.state;\n      if (clock > 0) {\n        this.setState((prevState) => ({\n          clock: prevState.clock - 1,\n        }));\n      }\n      if (clock === 0) {\n        clearInterval(this.clockTimer);\n        this.setState(() => ({\n          isAnswered: true,\n        }));\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  adjustingFetch() {\n    const { getQuestions, categorie, difficulty, type } = this.props;\n    const adjustedCategorie = categorie ? `&category=${categorie}` : '';\n    const adjustedDifficult = difficulty ? `&difficulty=${difficulty}` : '';\n    const adjustedType = type ? `&type=${type}` : '';\n    let token = `&token=${localStorage.getItem('token')}`;\n    if (localStorage.getItem('token') === null) token = '';\n    getQuestions(adjustedCategorie, adjustedDifficult, adjustedType, token);\n  }\n\n  changeIndex() {\n    if (this.state.index < 4) {\n      this.setState({\n        index: this.state.index + 1,\n        isAnswered: false,\n        clock: 30,\n      });\n    }\n    if (this.state.index === 4) {\n      this.setState({\n        isEndGame: true,\n      });\n      QuestionsTrivia.setRanking();\n    }\n  }\n\n  validAnswer(userAnswer, objAnswer) {\n    const { changeScore } = this.props;\n    const { correct_answer: correctAnswer, difficulty } = objAnswer;\n    const newScore = 10 + (calculateScore(difficulty) * this.state.clock);\n    if (userAnswer === correctAnswer) {\n      this.setState(() => ({\n        rightQuestions: this.state.rightQuestions + 1,\n        score: this.state.score + newScore,\n      }));\n      const state = JSON.parse(localStorage.getItem('state'));\n      state.player.assertions += 1;\n      state.player.score += newScore;\n      localStorage.setItem('state', JSON.stringify(state));\n      changeScore(newScore);\n    }\n    this.setState({\n      isAnswered: true,\n    });\n  }\n\n  classNameToButton(userAnswer, correctAnswer) {\n    const { isAnswered } = this.state;\n    if (!isAnswered) return 'btn-grey';\n    if (userAnswer === correctAnswer) return 'btn-green';\n    return 'btn-red';\n  }\n\n  buttonNext() {\n    const { isAnswered } = this.state;\n    return (\n      <button\n        type=\"button\"\n        className=\"btn-next\"\n        hidden={!isAnswered}\n        data-testid=\"btn-next\"\n        onClick={() => this.changeIndex()}\n      >\n        PRÓXIMA\n      </button>\n    );\n  }\n\n  render() {\n    const { index, isEndGame, clock } = this.state;\n    const { results, responseCode, isFetching } = this.props;\n    if (isFetching || responseCode === 1) return <div>Loading...</div>;\n    if (responseCode === 3) return QuestionsTrivia.notFound();\n    const allAnswers = randomQuestions(results, index);\n    if (isEndGame) return <Redirect to=\"/feedback\" />;\n    return (\n      <div className=\"questions-container\">\n        {QuestionsTrivia.renderQuestion(\n          clock, results[index].category, results[index].question,\n        )}\n        <div className=\"questions-buttons\">\n          {allAnswers.sort().map((answer) => (\n            <button\n              className={this.classNameToButton(answer, results[index].correct_answer)}\n              data-testid={QuestionsTrivia.dataTestToAnswer(\n                answer,\n                results[index].correct_answer,\n                allAnswers)}\n              key={answer}\n              disabled={this.state.isAnswered}\n              type=\"button\"\n              onClick={() => this.validAnswer(answer, results[index])}\n            > {answer}\n            </button>\n          ))}\n          {this.buttonNext()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  selectorsChange: { categorie, difficulty, type },\n  questionsReducer: { results, responseCode, isFetching },\n}) => ({ results, categorie, difficulty, type, responseCode, isFetching });\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (categorie, difficulty, type, token) =>\n    dispatch(fetchQuestions(categorie, difficulty, type, token)),\n  changeScore: (value) => dispatch(handleScoreChanges(value)),\n});\n\nQuestionsTrivia.propTypes = {\n  getQuestions: PropTypes.func.isRequired,\n  results: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.string,\n  ]),\n  categorie: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  changeScore: PropTypes.func.isRequired,\n  responseCode: PropTypes.number.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n};\n\n\nQuestionsTrivia.defaultProps = {\n  results: [],\n  responseCode: 1,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionsTrivia);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ConfigurationButton from './ConfigurationButton';\nimport '../style/Header.css';\n\nconst showConfig = () => {\n  if (window.location.href.includes('feedback')) return <ConfigurationButton />;\n  return '';\n};\n\nclass Header extends React.Component {\n  render() {\n    const state = JSON.parse(localStorage.getItem('state')) || [];\n    const { name, picture, score } = state.player || '';\n    return (\n      <div className=\"Header_father\">\n        <div className=\"Header_image-and-name\">\n          <img\n            data-testid=\"header-profile-picture\"\n            className=\"Header_player-image\"\n            alt={`${name} player gravatar`}\n            src={picture}\n          />\n          <p\n            data-testid=\"header-player-name\"\n            className=\"Header_player-name\"\n          >\n            Jogador: {name || ''}\n          </p>\n        </div>\n        <div className=\"Header_score\">\n          <p\n            data-testid=\"header-score\"\n            className=\"Header_score-text\"\n          >\n            Pontos: {score}\n          </p>\n          {showConfig()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ scoreChangeReducer: { score } }) => ({ storeScore: score });\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport QuestionsTrivia from '../components/QuestionsTrivia';\nimport Header from '../components/Header';\n\nconst Questions = () => (\n  <div>\n    <Header />\n    <QuestionsTrivia />\n  </div>\n);\n\nexport default Questions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { handleScoreChanges } from '../actions';\nimport '../style/Buttons.css';\n\nconst handleClick = (changeScore) => {\n  const state = JSON.parse(localStorage.getItem('state'));\n  const invertedScore = state.player.score * -1;\n  changeScore(invertedScore);\n};\n\nconst ToRanking = ({ buttonName, changeScore }) => (\n  <Link to=\"/ranking\">\n    <button\n      className=\"Button_ranking\"\n      onClick={() => handleClick(changeScore)}\n      type=\"button\"\n    >\n      {buttonName}\n    </button>\n  </Link>\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeScore: (value) => dispatch(handleScoreChanges(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(ToRanking);\n\nToRanking.propTypes = {\n  buttonName: PropTypes.string.isRequired,\n  changeScore: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { handleScoreChanges } from '../actions';\nimport '../style/Buttons.css';\n\nconst handleClick = (changeScore) => {\n  const state = JSON.parse(localStorage.getItem('state'));\n  const invertedScore = state.player.score * -1;\n  state.player.assertions = 0;\n  state.player.score = 0;\n  localStorage.setItem('state', JSON.stringify(state));\n  changeScore(invertedScore);\n};\n\nconst PlayAgain = ({ buttonName, changeScore }) => (\n  <Link to=\"/\">\n    <button\n      onClick={() => handleClick(changeScore)}\n      className=\"Button_play-again\"\n      type=\"button\"\n    >\n      {buttonName}\n    </button>\n  </Link>\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeScore: (value) => dispatch(handleScoreChanges(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(PlayAgain);\n\nPlayAgain.propTypes = {\n  buttonName: PropTypes.string.isRequired,\n  changeScore: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Header from '../components/Header';\nimport ToRanking from '../components/ToRanking';\nimport PlayAgain from '../components/PlayAgain';\nimport '../style/Feedback.css';\n\nconst Feedback = () => {\n  const state = JSON.parse(localStorage.getItem('state')) ||\n    { player: { name: '', assertions: 0, score: 0, gravatarEmail: '', picture: '' } };\n  const { assertions, score } = state.player;\n  const answerTitle = assertions >= 3 ? 'Mandou bem!' : 'Podia ser melhor...';\n  return (\n    <div>\n      <Header />\n      <div className=\"Feedback_father-div\">\n        <h1 data-testid=\"feedback-text\">{answerTitle}</h1>\n        <p data-testid=\"feedback-total-question\">Você acertou {assertions} questões!</p>\n        <p data-testid=\"feedback-total-score\">Um total de {score} pontos</p>\n        <ToRanking buttonName={'Ver Ranking'} />\n        <PlayAgain buttonName={'Jogar Novamente'} />\n      </div>\n    </div>\n  );\n};\n\nexport default Feedback;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../style/Ranking.css';\n\nconst imgComponent = (picture, position) => (\n  <img\n    data-testid={`profile-picture-${position}`}\n    className=\"ranking-img\"\n    src={picture}\n    alt=\"Player pictures\"\n  />\n);\n\nconst Ranking = () => {\n  const getLocalStor = JSON.parse(localStorage.getItem('ranking')) || [];\n  getLocalStor.sort((a, b) => {\n    if (a.score > b.score) return -1;\n    if (a.score < b.score) return 1;\n    return 0;\n  });\n  return (\n    <div className=\"Ranking_father\">\n      <h1 className=\"ranking-title\">Ranking</h1>\n      {getLocalStor.map(({ name, score, picture }, index) => {\n        const position = index + 1;\n        return (\n          <div className=\"ranking-item\" key={`${name}-${score}`}>\n            {imgComponent(picture, position)}\n            <span data-testid={`${name}-${position}`} className=\"ranking-text\">\n              {name} - {score} pontos\n            </span>\n          </div>\n        );\n      })\n      }\n      <Link to=\"/\">\n        <button data-testid=\"btn-go-home\" className=\"Button_home\">Voltar ao início</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Settings from './pages/Settings';\nimport Questions from './pages/Questions';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './style/App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <HashRouter basename='/trivia-react-redux/'>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/game\" component={Questions} />\n            <Route path=\"/feedback\" component={Feedback} />\n            <Route path=\"/ranking\" component={Ranking} />\n          </Switch>\n        </HashRouter>\n      </BrowserRouter >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport store from './store';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}